var search_data = {"index":{"searchIndex":["cryptomnio","rest","client","httpclient","loghttprequest","_check_errors()","_rest_call()","auth_cryptomnio()","auth_cryptomnio_test()","context_switch()","del_account_order()","geminfo()","get()","get()","get_account()","get_account_available_balance_symbol()","get_account_balance()","get_account_balance_symbol()","get_account_order()","get_account_orders()","get_account_trade()","get_account_trades()","get_market_ema()","get_market_momentum()","get_market_orderbook()","get_market_orderbook_depth_price()","get_market_orderbook_depth_volume()","get_market_periods()","get_market_ticker()","get_market_tickers()","get_market_trades()","get_markets()","get_venues()","initalize()","initalize()","new()","new()","put_account_order_limit()","put_account_order_market()"],"longSearchIndex":["cryptomnio","cryptomnio::rest","cryptomnio::rest::client","httpclient","loghttprequest","cryptomnio::rest::client#_check_errors()","cryptomnio::rest::client#_rest_call()","cryptomnio::rest::client#auth_cryptomnio()","cryptomnio::rest::client#auth_cryptomnio_test()","cryptomnio::rest::client#context_switch()","cryptomnio::rest::client#del_account_order()","cryptomnio#geminfo()","httpclient#get()","loghttprequest#get()","cryptomnio::rest::client#get_account()","cryptomnio::rest::client#get_account_available_balance_symbol()","cryptomnio::rest::client#get_account_balance()","cryptomnio::rest::client#get_account_balance_symbol()","cryptomnio::rest::client#get_account_order()","cryptomnio::rest::client#get_account_orders()","cryptomnio::rest::client#get_account_trade()","cryptomnio::rest::client#get_account_trades()","cryptomnio::rest::client#get_market_ema()","cryptomnio::rest::client#get_market_momentum()","cryptomnio::rest::client#get_market_orderbook()","cryptomnio::rest::client#get_market_orderbook_depth_price()","cryptomnio::rest::client#get_market_orderbook_depth_volume()","cryptomnio::rest::client#get_market_periods()","cryptomnio::rest::client#get_market_ticker()","cryptomnio::rest::client#get_market_tickers()","cryptomnio::rest::client#get_market_trades()","cryptomnio::rest::client#get_markets()","cryptomnio::rest::client#get_venues()","cryptomnio::rest#initalize()","httpclient#initalize()","cryptomnio::new()","cryptomnio::rest::client::new()","cryptomnio::rest::client#put_account_order_limit()","cryptomnio::rest::client#put_account_order_market()"],"info":[["Cryptomnio","","Cryptomnio.html","","<p>This is the root Cryptomnio object Class.  It contains global constants.\n"],["Cryptomnio::REST","","Cryptomnio/REST.html","","<p>This is the root Cryptomnio REST object Class.\n<p>It inherets from the Cryptomnio object Class and contains …\n"],["Cryptomnio::REST::Client","","Cryptomnio/REST/Client.html","","<p>This is the Cryptomnio REST Client object Class\n<p>It inherets from the Cryptomnio::REST object Class and …\n"],["HTTPClient","","HTTPClient.html","","<p>HTTPClient Class Wrapper\n"],["LogHTTPRequest","","LogHTTPRequest.html","","<p>HTTP Request Logging module for HTTPClient decoration\n"],["_check_errors","Cryptomnio::REST::Client","Cryptomnio/REST/Client.html#method-i-_check_errors","( response, thisfailure )","<p>Error-handling method\n"],["_rest_call","Cryptomnio::REST::Client","Cryptomnio/REST/Client.html#method-i-_rest_call","( method = :get, api = :core, uripath = \"/\", uriparameters = nil, error_string = \"REST API Call Failed\", body = nil )","<p>Generic REST API call method Provides RestClient call with needed\nauthentication headers and error handling …\n"],["auth_cryptomnio","Cryptomnio::REST::Client","Cryptomnio/REST/Client.html#method-i-auth_cryptomnio","( method, uripath )","<p>Cryptomnio Key Authentication\n"],["auth_cryptomnio_test","Cryptomnio::REST::Client","Cryptomnio/REST/Client.html#method-i-auth_cryptomnio_test","()","<p>Test method wrapper for Cryptomnio Key Authentication\n"],["context_switch","Cryptomnio::REST::Client","Cryptomnio/REST/Client.html#method-i-context_switch","( label )","<p>Switch Object&#39;s Context (Account + Venue to operate as)\n"],["del_account_order","Cryptomnio::REST::Client","Cryptomnio/REST/Client.html#method-i-del_account_order","( orderid:, venue: @context[:venue].to_s, accountid: @context[:accountid], venuekeyid: @context[:venuekeyid] )","<p>Delete (cancel) a venue account&#39;s open order\n"],["geminfo","Cryptomnio","Cryptomnio.html#method-i-geminfo","()","<p>Returns the Gem information\n"],["get","HTTPClient","HTTPClient.html#method-i-get","(*args)",""],["get","LogHTTPRequest","LogHTTPRequest.html#method-i-get","(url)","<p>Gets the specified URL\n"],["get_account","Cryptomnio::REST::Client","Cryptomnio/REST/Client.html#method-i-get_account","( venue: @context[:venue].to_s, accountid: @context[:accountid] )","<p>Return a hash of a venue account\n"],["get_account_available_balance_symbol","Cryptomnio::REST::Client","Cryptomnio/REST/Client.html#method-i-get_account_available_balance_symbol","( symbol:, venue: @context[:venue].to_s, accountid: @context[:accountid], venuekeyid: @context[:venuekeyid] )","<p>Get account balance for symbol\n"],["get_account_balance","Cryptomnio::REST::Client","Cryptomnio/REST/Client.html#method-i-get_account_balance","( venue: @context[:venue].to_s, accountid: @context[:accountid], venuekeyid: @context[:venuekeyid] )","<p>Return an array of hashes of a venue account&#39;s balances\n"],["get_account_balance_symbol","Cryptomnio::REST::Client","Cryptomnio/REST/Client.html#method-i-get_account_balance_symbol","( symbol:, venue: @context[:venue].to_s, accountid: @context[:accountid], venuekeyid: @context[:venuekeyid] )","<p>Get account balance for symbol\n"],["get_account_order","Cryptomnio::REST::Client","Cryptomnio/REST/Client.html#method-i-get_account_order","( orderid:, venue: @context[:venue].to_s, accountid: @context[:accountid], venuekeyid: @context[:venuekeyid] )","<p>Return an hash of a venue account&#39;s single order\n"],["get_account_orders","Cryptomnio::REST::Client","Cryptomnio/REST/Client.html#method-i-get_account_orders","( status_filters: [], venue: @context[:venue].to_s, accountid: @context[:accountid], venuekeyid: @context[:venuekeyid] )","<p>Return an array of hashes of a venue account&#39;s orders Accepts optional\narray of orders statuses for …\n"],["get_account_trade","Cryptomnio::REST::Client","Cryptomnio/REST/Client.html#method-i-get_account_trade","( tradeid:, venue: @context[:venue].to_s, accountid: @context[:accountid], venuekeyid: @context[:venuekeyid] )","<p>Return a hash of a venue account&#39;s trade\n"],["get_account_trades","Cryptomnio::REST::Client","Cryptomnio/REST/Client.html#method-i-get_account_trades","( venue: @context[:venue].to_s, accountid: @context[:accountid], venuekeyid: @context[:venuekeyid] )","<p>Return an array of hashes of a venue account&#39;s trades\n"],["get_market_ema","Cryptomnio::REST::Client","Cryptomnio/REST/Client.html#method-i-get_market_ema","( market:, type:, periodlength:, periodcalc:, periodcount: nil, to: nil, venue: @context[:venue].to_s)","<p>Return an exponential moving average value for a defined period of time\n"],["get_market_momentum","Cryptomnio::REST::Client","Cryptomnio/REST/Client.html#method-i-get_market_momentum","( market:, type:, periodlength:, periodcount: nil, to: nil, venue: @context[:venue].to_s)","<p>Return a momentum value for a defined period of time\n"],["get_market_orderbook","Cryptomnio::REST::Client","Cryptomnio/REST/Client.html#method-i-get_market_orderbook","( market:, side: nil, limit: nil, venue: @context[:venue].to_s)","<p>Return a hash of a venue market&#39;s order book\n"],["get_market_orderbook_depth_price","Cryptomnio::REST::Client","Cryptomnio/REST/Client.html#method-i-get_market_orderbook_depth_price","( market:, side: nil, volume: nil, cumulative: nil, venue: @context[:venue].to_s)","<p>Return a hash of a venue market&#39;s order book&#39;s price at a specified\nvolume\n"],["get_market_orderbook_depth_volume","Cryptomnio::REST::Client","Cryptomnio/REST/Client.html#method-i-get_market_orderbook_depth_volume","( market:, side: nil, price: nil, cumulative: nil, venue: @context[:venue].to_s)","<p>Return a hash of a venue market&#39;s order book&#39;s volume at a\nspecified price\n"],["get_market_periods","Cryptomnio::REST::Client","Cryptomnio/REST/Client.html#method-i-get_market_periods","( market:, periodlength:, periodcount: nil, to: nil, limit: nil, venue: @context[:venue].to_s)","<p>Return an array of period data\n"],["get_market_ticker","Cryptomnio::REST::Client","Cryptomnio/REST/Client.html#method-i-get_market_ticker","( market:, venue: @context[:venue].to_s)","<p>Return a venue market&#39;s most current ticker hash\n"],["get_market_tickers","Cryptomnio::REST::Client","Cryptomnio/REST/Client.html#method-i-get_market_tickers","( market:, from: (Time.now.to_i - 300) * 1000, to: nil, cursor: nil, venue: @context[:venue].to_s)","<p>Return an array of a venue market&#39;s ticker hashes\n"],["get_market_trades","Cryptomnio::REST::Client","Cryptomnio/REST/Client.html#method-i-get_market_trades","( market:, limit: nil, venue: @context[:venue].to_s )","<p>Return a venue market&#39;s recent trades array\n"],["get_markets","Cryptomnio::REST::Client","Cryptomnio/REST/Client.html#method-i-get_markets","( venue: )","<p>Return an array of hashes of a venue&#39;s markets\n"],["get_venues","Cryptomnio::REST::Client","Cryptomnio/REST/Client.html#method-i-get_venues","()","<p>Return an array of supported Venues\n"],["initalize","Cryptomnio::REST","Cryptomnio/REST.html#method-i-initalize","()","<p>Creates a new Cryptomnio::REST object.\n<p>If “http_proxy” is set in the program&#39;s environment, …\n"],["initalize","HTTPClient","HTTPClient.html#method-i-initalize","(client = RestClient)",""],["new","Cryptomnio","Cryptomnio.html#method-c-new","()","<p>Creates a new Cryptomnio object\n"],["new","Cryptomnio::REST::Client","Cryptomnio/REST/Client.html#method-c-new","()","<p>Object initialization\n"],["put_account_order_limit","Cryptomnio::REST::Client","Cryptomnio/REST/Client.html#method-i-put_account_order_limit","( market:, side:, quantity:, price:, venue: @context[:venue].to_s, accountid: @context[:accountid], venuekeyid: @context[:venuekeyid] )","<p>Create a new limit order under a venue account\n"],["put_account_order_market","Cryptomnio::REST::Client","Cryptomnio/REST/Client.html#method-i-put_account_order_market","( market:, side:, quantity:, amount:, venue: @context[:venue].to_s, accountid: @context[:accountid], venuekeyid: @context[:venuekeyid] )","<p>Create a new market order under a venue account\n"]]}}